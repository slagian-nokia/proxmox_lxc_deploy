# /home/ansible/proxmox_lxc_deploy/deploy_lxc.yml
---
- name: Deploy LXC container on Proxmox VE
  hosts: proxmox
  gather_facts: no
  collections:
    - community.proxmox
  vars_files:
    - group_vars/all.yml # This provides the default 'lxc_config'
    - group_vars/creds.yml

  vars: # <--- ADD THIS VARS SECTION
    # This variable will hold any lxc_config overrides coming from Semaphore.
    # It defaults to an empty dictionary so 'combine' works even if no override is provided.
    lxc_config_override: {}

  environment:
    ANSIBLE_COLLECTIONS_PATHS: "/home/ansible/semaphore_ansible_env/lib/python3.12/site-packages"

  pre_tasks:
    - name: Ensure community.proxmox collection is installed
      ansible.builtin.command: /home/ansible/semaphore_ansible_env/bin/ansible-galaxy collection install community.proxmox
      delegate_to: localhost
      run_once: true
      ignore_errors: true

  tasks:
    # --- THIS IS THE CRUCIAL TASK FOR OPTIONAL OVERRIDES ---
    - name: Combine default lxc_config with provided overrides
      ansible.builtin.set_fact:
        # 'lxc_config' on the left comes from group_vars/all.yml (lower precedence).
        # 'lxc_config_override' on the right comes from Semaphore (higher precedence).
        # recursive=True ensures nested dictionaries (like network_interfaces) are also merged.
        # .default({}) is added to 'lxc_config' just in case all.yml doesn't define it for some reason,
        # making the combine safe even in that edge case.
        lxc_config: "{{ lxc_config | default({}) | combine(lxc_config_override, recursive=True) }}"
      run_once: true # Ensures it runs only once per playbook run

    # All subsequent tasks use {{ lxc_config.variable_name }}
    - name: Check if LXC container config file exists for VMID {{ lxc_config.vmid }}
      ansible.builtin.stat:
        path: "/etc/pve/lxc/{{ lxc_config.vmid }}.conf"
      register: lxc_config_file_status
      delegate_to: "{{ inventory_hostname }}"

    - name: "Create LXC container \"{{ lxc_config.hostname }}\" (ID: {{ lxc_config.vmid }}) using pct"
      ansible.builtin.command: >
        pct create {{ lxc_config.vmid }}
        {{ lxc_config.storage }}:vztmpl/{{ lxc_config.ostemplate }}
        --hostname {{ lxc_config.hostname }}
        --cores {{ lxc_config.cores }}
        --memory {{ lxc_config.memory }}
        --rootfs {{ lxc_config.storage }}:{{ lxc_config.rootfs_size | replace('G','') }}
        --password {{ lxc_config.password }}
        --unprivileged 1
        {# Loop through network_interfaces to build --netX parameters #}
        {% for net_conf in lxc_config.network_interfaces %}
        --net{{ loop.index0 }} "{{ 'name=' + net_conf.name + ',bridge=' + net_conf.bridge + (',ip=dhcp' if net_conf.ip == 'dhcp' else (',ip=' + net_conf.ip + (',gw=' + net_conf.gateway if net_conf.gateway is defined else ''))) + (',' + net_conf.extra_options if net_conf.extra_options is defined else '') }}"
        {% endfor %}
        {# Primary nameserver(s) typically only set for the first interface or globally for pct create #}
        {% if lxc_config.network_interfaces[0].nameserver is defined %}
        --nameserver "{{ lxc_config.network_interfaces[0].nameserver }}{% if lxc_config.network_interfaces[0].nameserver2 is defined %},{{ lxc_config.network_interfaces[0].nameserver2 }}{% endif %}"
        {% endif %}
      args:
        creates: "/etc/pve/lxc/{{ lxc_config.vmid }}.conf"
      when: not lxc_config_file_status.stat.exists

    - name: "Start LXC container {{ lxc_config.hostname }} (ID: {{ lxc_config.vmid }})"
      community.proxmox.proxmox:
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        api_host: "{{ proxmox_host }}"
        vmid: "{{ lxc_config.vmid }}"
        node: "{{ lxc_config.node }}"
        state: started

    - name: Wait for LXC container to be ready for pct exec
      ansible.builtin.command: "pct exec {{ lxc_config.vmid }} -- true"
      register: pct_exec_check_result
      delegate_to: "{{ inventory_hostname }}"
      retries: 30
      delay: 5
      until: pct_exec_check_result.rc == 0
      when: not lxc_config_file_status.stat.exists

    - name: Install OpenSSH Server and iperf3 with proxy in LXC container {{ lxc_config.vmid }}
      ansible.builtin.command: |
        pct exec {{ lxc_config.vmid }} -- sh -c '
        export http_proxy="http://135.245.192.7:8000"
        export https_proxy="http://135.245.192.7:8000"
        apk update
        apk add --no-cache openssh iperf3 tcpdump sudo
        '
      delegate_to: "{{ inventory_hostname }}"
      when: not lxc_config_file_status.stat.exists

    - name: Enable and start OpenSSH service in LXC container {{ lxc_config.vmid }}
      ansible.builtin.command: |
        pct exec {{ lxc_config.vmid }} -- sh -c '
        rc-update add sshd default
        rc-service sshd start
        '
      delegate_to: "{{ inventory_hostname }}"
      when: not lxc_config_file_status.stat.exists

    - name: Create user 'ouser' and grant sudo access using pct exec
      ansible.builtin.command:
        cmd: "pct exec {{ lxc_config.vmid }} -- sh"
        stdin: |
          adduser -D -g wheel -s /bin/ash ouser
          echo "ouser:Testtest1" | chpasswd
          grep -q "^%wheel ALL=(ALL) ALL" /etc/sudoers || echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers
      delegate_to: "{{ inventory_hostname }}"
      when: not lxc_config_file_status.stat.exists
