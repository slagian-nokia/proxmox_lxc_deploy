# /home/ansible/proxmox_lxc_deploy/deploy_lxc.yml
---
- name: Deploy LXC container on Proxmox VE
  hosts: proxmox
  gather_facts: no
  collections:
    - community.proxmox
  vars_files:
    - group_vars/all.yml # This now provides top-level variables with defaults
    - group_vars/creds.yml

  environment:
    ANSIBLE_COLLECTIONS_PATHS: "/home/ansible/semaphore_ansible_env/lib/python3.12/site-packages/ansible_collections"

  # If you keep it, the path should be:
  # ANSIBLE_COLLECTIONS_PATHS: "/home/ansible/semaphore_ansible_env/lib/python3.12/site-packages/ansible_collections"
  # pre_tasks:
  #   - name: Ensure community.proxmox collection is installed
  #     ansible.builtin.command: /home/ansible/semaphore_ansible_env/bin/ansible-galaxy collection install community.proxmox
  #     delegate_to: localhost
  #     run_once: true
  #     ignore_errors: true


  tasks:
    # Task 1: Check if container config file exists on the Proxmox host
    - name: Check if LXC container config file exists for VMID {{ vmid }} # CORRECTED: Removed lxc_config.
      ansible.builtin.stat:
        path: "/etc/pve/lxc/{{ vmid }}.conf"
      register: lxc_config_file_status
      delegate_to: "{{ inventory_hostname }}"

    # Task 2: Create LXC container using pct command if it does not exist
    - name: "Create LXC container \"{{ hostname }}\" (ID: {{ vmid }}) using pct" # CORRECTED: Removed lxc_config.
      ansible.builtin.command: >
        pct create {{ vmid }} # CORRECTED: Removed lxc_config.
        {{ storage }}:vztmpl/{{ ostemplate }} # CORRECTED: Removed lxc_config.
        --hostname {{ hostname }} # CORRECTED: Removed lxc_config.
        --cores {{ cores }} # CORRECTED: Removed lxc_config.
        --memory {{ memory }} # CORRECTED: Removed lxc_config.
        --rootfs {{ storage }}:{{ rootfs_size | replace('G','') }} # CORRECTED: Removed lxc_config.
        --password {{ password }} # CORRECTED: Removed lxc_config.
        --unprivileged 1
        {# Loop through network_interfaces to build --netX parameters #}
        {% for net_conf in network_interfaces %} # CORRECTED: network_interfaces is now top-level
        --net{{ loop.index0 }} "{{ 'name=' + net_conf.name + ',bridge=' + net_conf.bridge + (',ip=dhcp' if net_conf.ip == 'dhcp' else (',ip=' + net_conf.ip + (',gw=' + net_conf.gateway if net_conf.gateway is defined else ''))) + (',' + net_conf.extra_options if net_conf.extra_options is defined else '') }}"
        {% endfor %}
        {# Primary nameserver(s) typically only set for the first interface or globally for pct create #}
        {% if network_interfaces[0].nameserver is defined %} # CORRECTED: network_interfaces is now top-level
        --nameserver "{{ network_interfaces[0].nameserver }}{% if network_interfaces[0].nameserver2 is defined %},{{ network_interfaces[0].nameserver2 }}{% endif %}"
        {% endif %}
      args:
        # The 'creates' argument in command module ensures idempotency by checking file existence
        creates: "/etc/pve/lxc/{{ vmid }}.conf" # CORRECTED: Removed lxc_config.
      when: not lxc_config_file_status.stat.exists # Run only if config file does NOT exist

    # Task 3: Start LXC container (using direct pct command)
    - name: "Start LXC container {{ hostname }} (ID: {{ vmid }})" # CORRECTED: Removed lxc_config.
      ansible.builtin.command: "pct start {{ vmid }}" # CORRECTED: Removed lxc_config.
      delegate_to: "{{ inventory_hostname }}"
      when: not lxc_config_file_status.stat.exists # Only run if container was just created

    # MODIFIED Task: Wait for LXC container to be ready for pct exec
    - name: Wait for LXC container to be ready for pct exec
      ansible.builtin.command: "pct exec {{ vmid }} -- true" # CORRECTED: Removed lxc_config.
      register: pct_exec_check_result
      delegate_to: "{{ inventory_hostname }}"
      retries: 30
      delay: 5
      until: pct_exec_check_result.rc == 0
      when: not lxc_config_file_status.stat.exists # Only run if container was just created

    # MODIFIED Task: Install OpenSSH Server and iperf3 with proxy setup
    - name: Install OpenSSH Server and iperf3 with proxy in LXC container {{ vmid }} # CORRECTED: Removed lxc_config.
      ansible.builtin.command: |
        pct exec {{ vmid }} -- sh -c ' # CORRECTED: Removed lxc_config.
        export http_proxy="http://135.245.192.7:8000"
        export https_proxy="http://135.245.192.7:8000"
        apk update
        apk add --no-cache openssh iperf3 tcpdump sudo
        '
      delegate_to: "{{ inventory_hostname }}" # Run on the Proxmox host to exec into container
      when: not lxc_config_file_status.stat.exists # Only run if container was just created

    # MODIFIED Task: Start and enable OpenSSH service in LXC container {{ lxc_config.vmid }}
    - name: Enable and start OpenSSH service in LXC container {{ vmid }} # CORRECTED: Removed lxc_config.
      ansible.builtin.command: |
        pct exec {{ vmid }} -- sh -c ' # CORRECTED: Removed lxc_config.
        rc-update add sshd default
        rc-service sshd start
        '
      delegate_to: "{{ inventory_hostname }}" # Run on the Proxmox host to exec into container
      when: not lxc_config_file_status.stat.exists # Only run if container was just created

    # MODIFIED Task: Create user 'ouser' and grant sudo access using pct exec
    - name: Create user 'ouser' and grant sudo access using pct exec
      ansible.builtin.command:
        cmd: "pct exec {{ vmid }} -- sh" # CORRECTED: Removed lxc_config.
        stdin: |
          adduser -D -g wheel -s /bin/ash ouser
          echo "ouser:Testtest1" | chpasswd
          grep -q "^%wheel ALL=(ALL) ALL" /etc/sudoers || echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers
      delegate_to: "{{ inventory_hostname }}" # Run on the Proxmox host
      when: not lxc_config_file_status.stat.exists # Only run if container was just created
